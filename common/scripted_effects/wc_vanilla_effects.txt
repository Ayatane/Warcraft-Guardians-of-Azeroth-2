# Override death effect for mod mechanics
override_death_effect = {
	save_scope_value_as = {
		name = death_reason
		value = flag:$death_reason$
	}
	if = { limit = { scope:death_reason = flag:$death_reason$ } } #to remove entire error list in error.log, honestly i dont even know why we need this save_scope_value_as
	
	if = {
		limit = { return_to_twisting_nether_trigger = yes }
		return_to_twisting_nether_effect = yes
	}
	else = {
		death = { death_reason = $death_reason$ }
	}
}
override_death_killer_effect = {
	save_scope_value_as = {
		name = death_reason
		value = flag:$death_reason$
	}
	if = { limit = { scope:death_reason = flag:$death_reason$ } } #to remove entire error list in error.log, honestly i dont even know why we need this save_scope_value_as
	$killer$ = { save_scope_as = killer }
	
	if = {
		limit = { return_to_twisting_nether_trigger = yes }
		return_to_twisting_nether_effect = yes
		random_secret = {
			limit = {
				secret_type = secret_murder
				secret_target = scope:killer
			}
			set_variable = {
				name = was_banished_to_nether
				value = yes
			}
		}
	}
	else = {
		death = { death_reason = $death_reason$ killer = $killer$ }
	}
}
override_death_killer_artifact_effect = {
	save_scope_value_as = {
		name = death_reason
		value = flag:$death_reason$
	}
	if = { limit = { scope:death_reason = flag:$death_reason$ } } #to remove entire error list in error.log, honestly i dont even know why we need this save_scope_value_as
	$killer$ = { save_scope_as = killer }
	
	if = {
		limit = { return_to_twisting_nether_trigger = yes }
		return_to_twisting_nether_effect = yes
		random_secret = {
			limit = {
				secret_type = secret_murder
				secret_target = scope:killer
			}
			set_variable = {
				name = was_banished_to_nether
				value = yes
			}
		}
	}
	else = {
		death = { death_reason = $death_reason$ killer = $killer$ artifact = $artifact$ }
	}
	
	$killer$ = { buff_frostmourne_if_equipped_effect = yes }
}

create_new_custom_empire_decision_effect = {
	custom_tooltip = create_new_empire
	show_as_tooltip = {
		every_held_title = {
			custom = create_title_every_held_kingdom
			limit = {
				tier = tier_kingdom
			}
			custom_tooltip = create_custom_empire_de_jure_changes
		}
	}

	hidden_effect = {
		save_scope_as = founder
		primary_title = {
			save_scope_as = old_title
		}

		create_dynamic_title = {
			tier = empire
			name = $NAME$
		}
		create_title_and_vassal_change = {
			type = created
			save_scope_as = change
			add_claim_on_loss = no
		}

		scope:new_title = {
			change_title_holder = {
				holder = root
				change = scope:change
			}
		}

		resolve_title_and_vassal_change = scope:change

  		every_held_title = {
			limit = {
				tier = tier_kingdom
			}
			if = {
				limit = {
					#Check if you need to notify a player
					exists = empire
					empire = {
						exists = holder
						holder = {
							NOT = { this = root }
							is_ai = no
						}
					}
				}
				add_to_temporary_list = kingdoms_for_notification
				root = {
					save_temporary_scope_value_as = {
						name = send_notifications
						value = yes
					}
				}
			}
			set_de_jure_liege_title = scope:new_title
		}

		every_sub_realm_county = {
			limit = {
				exists = kingdom
				NOT = { exists = kingdom.holder }
				holder.top_liege = root
				kingdom = {
					save_temporary_scope_as = test_kingdom
				}
				holder.top_liege = {
					completely_controls = scope:test_kingdom
				}
			}
			if = {
				limit = {
					NOT = {
						kingdom = {
							is_in_list = additional_de_jure_kingdoms
						}
					}
				}
				kingdom = {
					set_de_jure_liege_title = scope:new_title
					add_to_list = additional_de_jure_kingdoms
				}
			}
		}

		scope:new_title = {
			set_coa = scope:old_title
			set_color_from_title = scope:old_title
			set_capital_county = scope:old_title.title_capital_county
		}
		set_primary_title_to = scope:new_title
	}	
}

wc_adopt_cultural_fashion_effect = {
	if = {
		limit = {
			root.culture = {
				NOT = { has_clothing_gfx = $wc_clothign_gfx$_clothing_gfx }
			}
			scope:advanced_culture = {
				has_clothing_gfx = $wc_clothign_gfx$_clothing_gfx
			}
		}
		add_character_flag = $wc_clothign_gfx$_style
		if = {
			limit = {
				root.primary_heir ?= {
					opinion = {
						target = root
						value >= 50
					}
				}
			}
			root.primary_heir = {
				add_character_flag = $wc_clothign_gfx$_style
			}
			custom_tooltip = bp2_yearly.6070.change_clothes_heir
		}
		else = {
			custom_tooltip = bp2_yearly.6070.change_clothes
		}
	}
}

wc_adopt_clothing_gfx_for_culture_effect = {
	#Gnomish Style
	wc_adopt_cultural_fashion_effect = { wc_clothign_gfx = gnomish }
	#Sayaadi Style
	wc_adopt_cultural_fashion_effect = { wc_clothign_gfx = sayaadi }
	#Demonic Style
	wc_adopt_cultural_fashion_effect = { wc_clothign_gfx = demonic }
	#Bloodtroll Style
	wc_adopt_cultural_fashion_effect = { wc_clothign_gfx = blood_troll }
	#Troll Style
	wc_adopt_cultural_fashion_effect = { wc_clothign_gfx = troll }
	#Scourge Style
	wc_adopt_cultural_fashion_effect = { wc_clothign_gfx = scourge }
	#Pygmy Style
	wc_adopt_cultural_fashion_effect = { wc_clothign_gfx = pygmy }
	#Bloodelven Style
	wc_adopt_cultural_fashion_effect = { wc_clothign_gfx = blood_elven }
	#Highelven Style
	wc_adopt_cultural_fashion_effect = { wc_clothign_gfx = high_elven }
	#Nightelven Style
	wc_adopt_cultural_fashion_effect = { wc_clothign_gfx = night_elven }
	#Ogre Style
	wc_adopt_cultural_fashion_effect = { wc_clothign_gfx = ogre }
	#Orcish Style
	wc_adopt_cultural_fashion_effect = { wc_clothign_gfx = orcish }
}