### Northshire ###

enforce_the_brotherhood_scripted_effect = {
	# Display simplified results.
	custom_tooltip = create_holy_order_decision_effect_message
	# Select a random county.
	title:c_northshire.holder = {
		random_held_title = {
			limit = {
				tier = tier_county
				title_province = { geographical_region = world_eastern_kingdoms_azeroth_azeroth }
				any_county_province = {
					OR = {
						has_holding = no
						has_holding_type = castle_holding
						has_holding_type = city_holding
					}
				}
			}
			save_scope_as = designated_county
		}
	}
	
	# Select an appropriate barony.
	## If there's an empty space in the capital, we create a castle.
	if = {
		limit = {
			scope:designated_county = {
				any_county_province = { has_holding = no }
			}
		}
		scope:designated_county = {
			random_county_province = {
				limit = { has_holding = no }
				set_holding_type = castle_holding
				barony = { save_scope_as = leased_barony }
			}
		}
	}
	## Otherwise, grab an existing non-capital castle/city.
	else = {
		scope:designated_county = {
			random_county_province = {
				limit = {
					is_county_capital = no
					OR = {
						has_holding_type = castle_holding
						has_holding_type = city_holding
					}
				}
				barony = { save_scope_as = leased_barony }
			}
		}
	}
	# Create a suitable leader for the Brotherhood
	create_character = {
		template = wc_northshire_deacon
		location = scope:leased_barony.title_province
		save_scope_as = leader
	}
	# Create the actual holy order.
	create_holy_order_neutral_effect = {
		LEADER = scope:leader
		CAPITAL = scope:leased_barony
		NEW_HO_SCOPE = new_holy_order
		FOUNDER = scope:founder
	}
	hidden_effect = {
		scope:leader = {
			add_trait = order_member
			add_piety_level = 2
			add_gold = holy_order_starting_gold
			every_courtier = { add_trait = order_member }
		}
	}
	## Give it some buildings.
	hidden_effect = {
		scope:leased_barony.title_province = {
			# Walls & Towers.
			if = {
				limit = {
					NOT = { has_building_or_higher = curtain_walls_01 }
				}
				# If it doesn't have a free building slot, give it one.
				if = {
					limit = { free_building_slots = 0 }
					add_province_modifier = extra_building_slot
				}
				# Add the building.
				add_building = curtain_walls_01
			}
			# Barracks.
			if = {
				limit = {
					NOT = { has_building_or_higher = barracks_01 }
				}
				# If it doesn't have a free building slot, give it one.
				if = {
					limit = { free_building_slots = 0 }
					add_province_modifier = extra_building_slot
				}
				# Add the building.
				add_building = barracks_01
			}
			# Military Camps.
			if = {
				limit = {
					NOT = { has_building_or_higher = military_camps_01 }
				}
				# If it doesn't have a free building slot, give it one.
				if = {
					limit = { free_building_slots = 0 }
					add_province_modifier = extra_building_slot
				}
				# Add the building.
				add_building = military_camps_01
			}
		}
	}
	# And the Deacon of the Brotherhood certainly looks favourably on their patron.
	## Hidden because the title doesn't play nicely with characters created in the same immediate block.
	hidden_effect = {
		scope:abbot = { set_relation_friend = { reason = friend_enforce_the_brotherhood target = scope:leader } }
	}
	# Mark the Brotherhood as existing & make them easily accessible
	set_global_variable = {
		name = brotherhood_of_northshire_title
		value = scope:leader.primary_title
	}
	# Some minor misc effects.
	create_holy_order_effect = yes
	scope:leader.primary_title = { set_coa = ho_brotherhood_of_northshire }
	# Flag the Brotherhood as enforced.
	hidden_effect = {
		add_to_global_variable_list = {
			name = unavailable_unique_decisions
			target = flag:flag_enforced_brotherhood
		}
	}
}

brotherhood_of_northshire_join_the_war_scripted_effect = {
	scope:founder = {
		every_character_war = {
			limit = {
				primary_defender = scope:founder
				primary_attacker = { is_crisis_trigger = yes } 
				NOT = { is_participant = scope:abbot }
			}
			hidden_effect = {
				set_called_to = scope:abbot
			}
			add_defender = scope:abbot
		}
	}
}

enforce_the_brotherhood_decision_tooltip_effect = {
	# Standard info.
	custom_tooltip = create_holy_order_decision_effect_message
	create_holy_order_effect = yes
}

### Silver Hand ###
create_paladins_list_effect = {
	# Get the list of original paladins
	religion:tyrism_religion = {
		every_faith = {
			every_faith_character = {
				limit = { can_be_paladin_trigger = yes }
				add_to_temporary_list = possible_paladins
			}
		}
	}
	ordered_in_list = {
		list = possible_paladins
		order_by = wc_paladins_value
		max = 5
		check_range_bounds = no
		add_to_temporary_list = original_paladins
	}
}

silver_hand_lands_scripted_effect = {
	if = {
		limit = {
			holds_landed_title = yes
			exists = scope:leader.liege
			scope:leader.liege ?= { tier <= tier_duchy }
		}
		scope:leader.liege = { save_temporary_scope_as = silver_hand_vassal }
		get_title = title:k_knights_of_the_silver_hand
		
		create_title_and_vassal_change = {
			type = swear_fealty
			save_scope_as = change
		}
		scope:silver_hand_vassal = {
			change_liege = {
				liege = scope:leader
				change = scope:change
			}
			add_opinion = {
				modifier = became_vassal
				target = scope:leader
				opinion = 10
			}
		}
		resolve_title_and_vassal_change = scope:change
	}
}

create_silver_hand_scripted_effect = {
	# Create the list of paladins
	create_paladins_list_effect = yes
		
	# Find Uther to become the Highlord of the Silver Hand
	if = { # Check if Uther is alive
		limit = { character:60036 = { is_original_silver_hand_paladin = yes } }
		character:60036 ?= { save_scope_as = leader }
	}
	else = {  # If not, get a random character from the list
		random_in_list = {
			list = original_paladins
			save_scope_as = leader
		}
	}
	
	# Give a leader and give lands if he doesn't have one
	scope:leader = { 
		silver_hand_lands_scripted_effect = yes
		give_nickname = nick_the_lightbringer
	}
	# Mark the Silver Hand  as existing & make them easily accessible
	set_global_variable = {
		name = silver_hand_title
		value = title:k_knights_of_the_silver_hand
	}
	# Flag the Silver Hand  as enforced.
	hidden_effect = {
		add_to_global_variable_list = {
			name = unavailable_unique_decisions
			target = flag:flag_silver_hand_creation
		}
	}
}

manage_original_paladins_scripted_effect = {
	# Create the list of paladins
	create_paladins_list_effect = yes
		
	# Vassalization and join court
	every_in_list = {
		list = original_paladins
		if = { # Vassal
			limit = {
				holds_landed_title = yes
				NOT = { this = scope:leader }
			}
			create_title_and_vassal_change = {
				type = swear_fealty
				save_scope_as = change
			}
			this = {
				change_liege = {
					liege = scope:leader
					change = scope:change
				}
				add_opinion = {
					modifier = became_vassal
					target = scope:leader
					opinion = 10
				}
			}
			resolve_title_and_vassal_change = scope:change
		}
		else_if = { # Courtier
			limit = { NOT = { this = scope:leader } }
			scope:leader = { add_courtier ?= prev }
		}
	}
}

create_and_distribute_original_librams_scripted_effect = {
	# Create the librams for the Church
	hidden_effect = {
		create_artifact_libram_effect = { OWNER = scope:founder LIBRAM_TYPE = compassion }
		create_artifact_libram_effect = { OWNER = scope:founder LIBRAM_TYPE = holiness }
		create_artifact_libram_effect = { OWNER = scope:founder LIBRAM_TYPE = justice }
		create_artifact_libram_effect = { OWNER = scope:founder LIBRAM_TYPE = protection }
		create_artifact_libram_effect = { OWNER = scope:founder LIBRAM_TYPE = retribution }
	}
	
	title:k_holy_light_church.holder = {
		every_character_artifact = {
			switch = {
				trigger = has_variable
				libram_justice = { save_scope_as = sc_justice }
				libram_compassion = { save_scope_as = sc_compassion }
				libram_holiness = { save_scope_as = sc_holiness }
				libram_protection = { save_scope_as = sc_protection }
				libram_retribution = { save_scope_as = sc_retribution }
			}
		}
	}
	
	if = { # Give Justice to Uther if he's available
		limit = {
			is_libram_available_trigger = { LIBRAM_TYPE = justice }
			character:60036 = { is_original_silver_hand_paladin = yes }
		}
		scope:sc_justice = { set_owner = character:60036 }
	}
	if = { # Give Compassion to Gavinrad if he's available
		limit = {
			is_libram_available_trigger = { LIBRAM_TYPE = compassion }
			character:5785 = { is_original_silver_hand_paladin = yes }
		}
		scope:sc_compassion = { set_owner = character:5785 }
	}
	if = { # Give Holiness to Saidan if he's available
		limit = {
			is_libram_available_trigger = { LIBRAM_TYPE = holiness }
			character:60021 = { is_original_silver_hand_paladin = yes }
		}
		scope:sc_holiness = { set_owner = character:60021 }
	}
	if = { # Give Protection to Turalyon if he's available
		limit = {
			is_libram_available_trigger = { LIBRAM_TYPE = protection }
			character:60247 = { is_original_silver_hand_paladin = yes }
		}
		scope:sc_protection = { set_owner = character:60247 }
	}
	if = { # Give Retribution to Tirion if he's available
		limit = {
			is_libram_available_trigger = { LIBRAM_TYPE = retribution }
			character:60014 = { is_original_silver_hand_paladin = yes }
		}
		scope:sc_retribution = { set_owner = character:60014 }
	}
	
	# If an original paladin is unavailable, give the libram to the new paladin
	if = {
		limit = { are_all_librams_distributed_trigger = no }
		# Create the list of paladins
		create_paladins_list_effect = yes
		# Iterate through the list
		every_in_list = {
			list = original_paladins
			limit = { NOT = { is_original_silver_hand_paladin = no } } # If he's an original lore paladin, he already have a libram
		
			if = { # If Justice is available, give it
				limit = { is_libram_available_trigger = { LIBRAM_TYPE = justice } }
				scope:sc_justice = { set_owner = this }
			}
			else_if = { # If not, give Compassion
				limit = { is_libram_available_trigger = { LIBRAM_TYPE = compassion } }
				scope:sc_compassion = { set_owner = this }
			}
			else_if = { # If not, give Holiness
				limit = { is_libram_available_trigger = { LIBRAM_TYPE = holiness } }
				scope:sc_holiness = { set_owner = this }
			}
			else_if = { # If not, give Protection
				limit = { is_libram_available_trigger = { LIBRAM_TYPE = protection } }
				scope:sc_protection = { set_owner = this }
			}
			else_if = { # If not, give Retribution
				limit = { is_libram_available_trigger = { LIBRAM_TYPE = retribution } }
				scope:sc_retribution = { set_owner = this }
			}
		}
	}
}