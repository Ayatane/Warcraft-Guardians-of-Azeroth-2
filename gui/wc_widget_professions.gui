widget = {
	name = "wc_widget_professions"
	parentanchor = top|right
	layer = windows_layer
	allow_outside = yes
	# So it's not possible to click county behind the interface
	alwaystransparent = no
	filter_mouse = all
	#using = Window_Size_MainTab
	size = { 655 100% }

	visible = "[GetVariableSystem.HasValue( 'right_window_open', 'professions' )]"

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		using = Window_Position_MainTab

		on_start = "[GetVariableSystem.Clear('selected_trait')]"
		on_start = "[GetVariableSystem.Set('profession_window_tabs', 'professions_view' )]"
		on_start = "[GetScriptedGui('open_professions_sgui').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		using = Window_Position_MainTab_Hide

		on_start = "[GetVariableSystem.ClearIf( 'right_window_open', GetVariableSystem.HasValue( 'right_window_open', 'none' ) )]"
	}

	margin_widget = {
		size = { 100% 100% }
		margin = { 0 25 }

		using = Window_Background

		widget = {
			name = "profession_picker"
			using = Window_Decoration_Thin
			allow_outside = yes
			size = { 100% 100% }
			vbox = {
				using = Window_Margins
				
				scrollbox = {

					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_background_fade"
					{
					}
					blockoverride "scrollbox_background"
					{
					}
					blockoverride "scrollbox_content"
					{
						
						header_with_picture = {
							layoutpolicy_horizontal = expanding
							size = { 0 240 }
							blockoverride "header_text"
							{
								text = "PROFESSIONS_WINDOW_TITLE"
							}
							blockoverride "size" {
								size = { 100% 266 }
							}
							blockoverride "illustration_texture" {
								texture = "gfx/interface/illustrations/window_headers/header_professions.dds"
								alpha = 0.3
								modify_texture = {
									texture = "gfx/interface/component_masks/mask_culture_era_tab.dds"
									blend_mode = alphamultiply
								}
							}
							
							blockoverride "button_close"
							{
								onclick = "[GetVariableSystem.Clear( 'right_window_open' )]"
							}

							vbox = {
								margin_top = 45
								margin_bottom = 12
								margin_left = 12
								margin_right = 12
								layoutpolicy_vertical = expanding
								hbox = {
									layoutpolicy_horizontal = expanding
									visible = "[Not(Or(PlayerHasVar('profession_1'),PlayerHasVar('profession_2')))]"
									
									text_label_center = {
										text = "PROFESSION_NONE_CHOSEN"
										default_format = "#low;italic"
										margin_top = 2
									}
								}
								hbox = {
									layoutpolicy_horizontal = expanding
									visible = "[And(Or(PlayerHasVar('profession_1'),PlayerHasVar('profession_2')), Not(PlayerHasVar('current_profession_activity')))]"
									
									text_label_center = {
										text = "PROFESSION_NO_ACTIVITY"
										default_format = "#low;italic"
										margin_top = 2
										margin_bottom = 8
									}
								}
								hbox = {
									visible = "[PlayerHasVar('current_profession_activity')]"
									layoutpolicy_vertical = fixed
									layoutpolicy_horizontal = fixed
								}
							}
						}
						
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							
							background = { 
								texture = "gfx/interface/illustrations/event_scenes/tauren_cave.dds"
								fittype = end
								alpha = 0.3

								modify_texture = {
									texture = "gfx/interface/component_masks/mask_fade_vertical_up.dds"
									blend_mode = alphamultiply
								}
							}
							
							# TABS
							hbox = {
								layoutpolicy_horizontal = expanding
								margin_bottom = 5

								button_tab = {
									layoutpolicy_horizontal = expanding
									onclick = "[GetVariableSystem.Set('profession_window_tabs', 'professions_view' )]"
									down = "[GetVariableSystem.HasValue( 'profession_window_tabs', 'professions_view' )]"

									text_single = {
										text = "PROFESSIONS_WINDOW_TITLE"
										parentanchor = center
			
										maximumsize = { 400 -1 }
										default_format = "#low"
									}
								}

								button_tab = {
									layoutpolicy_horizontal = expanding
									onclick = "[GetVariableSystem.Set( 'profession_window_tabs', 'reagents_view' )]"
									down = "[GetVariableSystem.HasValue( 'profession_window_tabs', 'reagents_view' )]"
									text_single = {
										text = "REAGENTS_WINDOW_TITLE"
										parentanchor = center
			
										maximumsize = { 400 -1 }
										default_format = "#low"
									}
								}
							}

							# VIEWS
							vbox = {
								name = "profession_tab_view"
								visible = "[GetVariableSystem.HasValue( 'profession_window_tabs', 'professions_view' )]"
								allow_outside = yes
								datacontext = "[GetPlayer.MakeScope.GetCharacter]"
								vbox = {
									visible = "[Not(Or(PlayerHasVar('profession_1'), PlayerHasVar('profession_2')))]"
								}
								vbox = {
									visible = "[Or(PlayerHasVar('profession_1'), PlayerHasVar('profession_2'))]"
									spacing = 10
									name = "current_professions_box"
									text_label_center = {
										text = "YOUR_PROFESSIONS"
									}
									professions_box = {
										visible = "[PlayerHasVar('profession_1')]"
										block "datacontext"
										{
											datacontext = "[PlayerGetVar('profession_1')]"
										}
									}
									
									professions_box = {
										visible = "[PlayerHasVar('profession_2')]"
										block "datacontext"
										{
											datacontext = "[PlayerGetVar('profession_2')]"
										}
									}

									hbox = {
										spacing = 50
										text_label_center = {
											text = "KNOWN_REAGENTS_TEXT"
										}
										text_label_center = {
											text = "LAST_DISCOVERED_REAGENT_TEXT"
											tooltip = "LD_REAGENT_TOOLTIP"
										}
									}
								}
								
								vbox = {
									spacing = 10
									name = "select_professions_box"
									text_label_center = {
										text = "CHOOSE_PROFESSION_TEXT"
									}
									visible = "[Not(And(PlayerHasVar('profession_1'), PlayerHasVar('profession_2')))]"
								
									fixedgridbox = {
										minimumsize = { 500 1 }
										addcolumn = 30%
										addrow = 90
										flipdirection = yes
										maxhorizontalslots = 1
										datamodel_wrap = 1
										datamodel = "[GetTraitsWithFlag('profession_trait')]"
										item = {
											button_standard = {
												size = { 500 75 }
												# Have to localize it, other wise it will say "miner" instead of mining
												enabled = "[Not(Character.HasTrait(Trait.Self))]"
												text_single = {
													parentanchor = left
													position = { 20 20 }
													text = "[Localize(Trait.GetNameNoTooltip(GetNullCharacter))]"
													fontsize = 20
												}
												tooltip = "[Trait.GetFullDescription(GetNullCharacter, Character.GetFaith)]"
												down = "[GetVariableSystem.HasValue('selected_trait', Trait.GetKey)]"
												onrightclick = "[GetVariableSystem.Clear('selected_trait')]"
												onclick = "[GetVariableSystem.Set('selected_trait', Trait.GetKey)]"
												onclick = "[GetVariableSystem.Set('profession_confirm_window_open', 'yes')]"
												icon = {
													parentanchor = right|top
													size = { 300 75 }
													texture = "[GetProfessionIllustration(Trait.GetNameNoTooltip(GetNullCharacter))]"
													alpha = 0.9
													using = Mask_Rough_Edges
													mirror = horizontal
													modify_texture = {
														texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
														blend_mode = alphamultiply
													}
												}
											}
										}			
										
									}
								}

								vbox = {
									visible = "[Not(Or(PlayerHasVar('profession_1'), PlayerHasVar('profession_2')))]"
								}
							}

							vbox = {
								name = "reagent_tab_view"
								visible = "[GetVariableSystem.HasValue( 'profession_window_tabs', 'reagents_view' )]"
								allow_outside = yes
								datacontext = "[GetPlayer.MakeScope.GetCharacter]"
								parentanchor = top
								spacing = 10
								text_single = {
									text = "KNOWN_REAGENTS_TEXT"
									fontsize = 18
								}
								#need inventory bg
								vbox = {
									name = "mining_reagents"
									#visible = "[Character.HasTrait(GetTrait('profession_mining'))]"
									text_label_center = {
										text = "MINING_REAGENTS_TEXT"
									}
									button_primary = {
										visible = "[InDebugMode]"
										size = { 150 75 }
										raw_text = "pickup ore"
										onclick = "[PlayerGuiExecute('pickup_ore_sgui')]"
									}
									text_label_center = {
										visible = "[InDebugMode]"
										raw_text = "DEBUG - known reagents: click to add 1, unknown reagents: click to discover"
									}
									spacing = 10
									fixedgridbox = {
										addcolumn = 100
										addrow = 100
										flipdirection = yes
										visible = "[Not(InDebugMode)]"
										datamodel_wrap = 5
										setitemsizefromcell = yes
										datamodel = "[GetGlobalList('mining_reagents')]"
										item = {
											# hbox = {
											# 	visible = "[And(Not(PlayerHasVar(Concatenate('knows_', Scope.GetFlagName))), InDebugMode]"
											# 	onclick = "[GetScriptedGui('discover_reagent_sgui').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('reagent', MakeScopeFlag(Scope.GetFlagName)).End)]"	
											# }
											button_standard = {
												size = { 100 100 }
												buttonText = {
													text_single = {
														position = { -10 -10 }
														parentanchor = bottom|right
														visible = "[And(PlayerHasVar(Concatenate('knows_', Scope.GetFlagName)), Not(PlayerHasVar(Concatenate(Scope.GetFlagName, '_amount'))))]"
														raw_text = "0"
														#text = "[Scope.GetFlagName]"
														fontsize = 16
													}
												}
												
												text_single = {
													position = { -10 -10 }
													parentanchor = bottom|right
													visible = "[PlayerHasVar(Concatenate(Scope.GetFlagName, '_amount'))]"
													text = "[PlayerGetVar(Concatenate(Scope.GetFlagName, '_amount')).GetValue]"
													fontsize = 16
												}

												hbox = {
													tooltip = "REAGENT_TOOLTIP_TEXT_KNOWN_MINING"
													visible = "[PlayerHasVar(Concatenate('knows_', Scope.GetFlagName))]"
												}

												hbox = {
													tooltip = "REAGENT_TOOLTIP_TEXT_UNKNOWN"
													visible = "[Not(PlayerHasVar(Concatenate('knows_', Scope.GetFlagName)))]"
												}
												
												hbox = {
													visible = "[Not(PlayerHasVar(Concatenate('knows_', Scope.GetFlagName)))]"
													text_single = {
														text = "question_mark"
														fontsize = 30
													}
												}														
												icon = {
													visible = "[PlayerHasVar(Concatenate('knows_', Scope.GetFlagName))]"
													using = Mask_Rough_Edges
													parentanchor = center
													size = { 75 75 }
													texture = "[GetProfessionIllustration(Scope.GetFlagName)]"
												}
											}
											
										}
									}
									fixedgridbox = {
										addcolumn = 100
										addrow = 100
										flipdirection = yes
										visible = "[InDebugMode]"
										datamodel_wrap = 5
										setitemsizefromcell = yes
										datamodel = "[GetGlobalList('mining_reagents')]"
										item = {
											button_standard = {
												size = { 100 100 }
												buttonText = {
													text_single = {
														position = { -10 -10 }
														parentanchor = bottom|right
														visible = "[And(PlayerHasVar(Concatenate('knows_', Scope.GetFlagName)), Not(PlayerHasVar(Concatenate(Scope.GetFlagName, '_amount'))))]"
														raw_text = "0"
														#text = "[Scope.GetFlagName]"
														fontsize = 16
													}
												}
												onclick = "[GetScriptedGui('discover_or_add_reagent_sgui').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('reagent', MakeScopeFlag(Scope.GetFlagName)).End)]"	

												text_single = {
													position = { -10 -10 }
													parentanchor = bottom|right
													visible = "[PlayerHasVar(Concatenate(Scope.GetFlagName, '_amount'))]"
													text = "[PlayerGetVar(Concatenate(Scope.GetFlagName, '_amount')).GetValue]"
													fontsize = 16
												}

												hbox = {
													tooltip = "REAGENT_TOOLTIP_TEXT_KNOWN_MINING"
													visible = "[PlayerHasVar(Concatenate('knows_', Scope.GetFlagName))]"
												}

												hbox = {
													tooltip = "REAGENT_TOOLTIP_TEXT_UNKNOWN"
													visible = "[Not(PlayerHasVar(Concatenate('knows_', Scope.GetFlagName)))]"
												}
												
												hbox = {
													visible = "[Not(PlayerHasVar(Concatenate('knows_', Scope.GetFlagName)))]"
													text_single = {
														text = "question_mark"
														fontsize = 30
													}
												}														
												icon = {
													visible = "[PlayerHasVar(Concatenate('knows_', Scope.GetFlagName))]"
													using = Mask_Rough_Edges
													parentanchor = center
													size = { 75 75 }
													texture = "[GetProfessionIllustration(Scope.GetFlagName)]"
												}
											}
											
										}
									}
								}
							
							}
						}
					}
				}
			}
		}
	}

	#this is basically decision window
	window = {
		name = "profession_confirm_window"
		parentanchor = center
		size = { 630 800 }
		layer = middle
		position = { -675 0 }
		using = Window_Movable
		using = Window_Background
		using = Window_Decoration_Spike

		visible = "[And(GetVariableSystem.HasValue('profession_confirm_window_open', 'yes'),IsInGame)]"

		state = {
			name = _show
			using = Animation_FadeIn_Quick
			using = Sound_WindowShow_Standard
		}
	
		state = {
			name = _hide
			using = Animation_FadeOut_Quick
			using = Sound_WindowHide_Standard
			on_start = "[GetVariableSystem.Clear('selected_trait')]"
		}

		vbox = {
			using = Window_Margins
			header_pattern = {
				layoutpolicy_horizontal = expanding	
				blockoverride "header_text"
				{
					text = "PROFESSION_CONFIRM_TEXT"
				}
	
				blockoverride "button_close"
				{
					onclick = "[GetVariableSystem.Set('profession_confirm_window_open', 'no')]"
				}
			}

			profession_detail_view_overview = {}
		}		
	}

	#Actual Profession Window
	window = {
		name = "profession_detail_window"
		layer = middle
		visible = "[And(GetVariableSystem.HasValue('profession_detail_window_open', 'yes'),IsInGame)]"
		using = Window_Background
		using = Window_Decoration_Spike
		allow_outside = yes 
		parentanchor = center
		position = { -650 0 }
		size = { 1250 775 }

		state = {
			name = _show
			using = Animation_FadeIn_Quick
			using = Sound_WindowShow_Standard
		}
	
		state = {
			name = _hide
			using = Animation_FadeOut_Quick
			using = Sound_WindowHide_Standard
			on_start = "[GetVariableSystem.Clear('current_view')]"
			on_start = "[GetVariableSystem.Clear('selected_item')]"
			on_start = "[GetVariableSystem.Clear('current_batch_function')]"
		}
		
		vbox = {
			using = Window_Margins
				
			hbox = {
				name = "main_window"
				vbox = {
					name = "reagents_recipes_view"
					layoutpolicy_vertical = expanding
					header_standard = {
						layoutpolicy_vertical = expanding
						size = { 350 50 }
						blockoverride "header_text"
						{
							visible = "[Not(IsGatheringProf)]"
							text = "RECIPES_TEXT"
						}
						blockoverride "header_text"
						{
							visible = "[IsGatheringProf]"
							text = "REAGENTS_TEXT"
						}
						blockoverride "button_close"
						{
							visible = no
						}
					}
					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = fixed
						minimumsize = { 350 675 }
						blockoverride "scrollbox_content"
						{
							dynamicgridbox = {
								datamodel_wrap = 1
								flipdirection = yes
								datamodel = "[GetGlobalList(Localize(Concatenate(GetVariableSystem.Get('current_view'), '_list_name')))]"
								item = {
									container = {
										visible = "[PlayerHasVar(Concatenate('knows_', Scope.GetFlagName))]"
										button_standard = {

											hbox = {
												visible = "[IsGatheringProf]"
												tooltip = "CLICK_SELECT_TOOLTIP_REA"
											}

											hbox = {
												visible = "[Not(IsGatheringProf)]"
												tooltip = "CLICK_SELECT_TOOLTIP_REC"
											}

											size = { 300 75 }
											buttonText = {
												visible = "[IsGatheringProf]"
												text_single = {
													position = { 0 0 }
													parentanchor = center
													text = "[Localize(Concatenate('reagent_', Scope.GetFlagName))]"
													fontsize = 24
												}
											}
											buttonText = {
												visible = "[Not(IsGatheringProf)]"
												text_single = {
													position = { 0 0 }
													parentanchor = center
													text = "[Localize(Concatenate('recipe_', Scope.GetFlagName))]"
													fontsize = 24
												}
											}
											icon = {
												visible = "[Not(PlayerHasVar(Concatenate(Scope.GetFlagName, '_amount')))]"
												using = Mask_Rough_Edges
												parentanchor = left
												position = { 25 15 }
												size = { 50 50 }
												texture = "[GetProfessionIllustration(Scope.GetFlagName)]"
												alpha = 0.4
											}
											icon = {
												visible = "[PlayerHasVar(Concatenate(Scope.GetFlagName, '_amount'))]"
												using = Mask_Rough_Edges
												parentanchor = left
												position = { 25 15 }
												size = { 50 50 }
												texture = "[GetProfessionIllustration(Scope.GetFlagName)]"
											}
											onrightclick = "[GetVariableSystem.Clear('selected_item')]"
											onclick = "[GetVariableSystem.Clear('current_batch_function')]"
											onclick = "[GetVariableSystem.Set('selected_item', Scope.GetFlagName)]"
											down = "[GetVariableSystem.HasValue('selected_item', Scope.GetFlagName)]"
										}
									}
								}
							}
						}
					}
				}
				vbox = {
					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						header_standard = {
							layoutpolicy_horizontal = expanding
				
							blockoverride "header_text"
							{
								text = "ACTIONS_TEXT"
							}
							blockoverride "button_close"
							{
								onclick = "[GetVariableSystem.Set('profession_detail_window_open', 'no')]"
							}
						}
						
						widget = {
							size = { 775 400 }
						}

						
						background = {
							texture = "gfx/interface/illustrations/professions/blacksmithing_shop.dds"
							modify_texture = {
								texture = "gfx/interface/component_masks/mask_culture_era_tab.dds"
								blend_mode = alphamultiply
							}	
							visible = "[Or(GetVariableSystem.HasValue('current_view', 'Mining'), GetVariableSystem.HasValue('current_view', 'Blacksmithing'))]"
						}
					}
					hbox = {
						name = "process_details"
						vbox = {
							name = "current_reagent"
							margin_left = 75
							margin_right = 75
							margin_top = 10
							margin_bottom = 20
							spacing = 15
							text_single = {
								text = "CURRENT_ITEM"
								fontsize = 20
							}
							button_standard = {
								size = { 75 75 }
								icon = {
									parentanchor = center
									position = { 0 0 }
									size = { 50 50 }
									visible = "[GetVariableSystem.Exists('selected_item')]"
									texture = "[GetProfessionIllustration(GetVariableSystem.Get('selected_item'))]"
								}
							}
							
							vbox = {
								spacing = 10
								visible = "[Not(GetVariableSystem.Exists('current_batch_function'))]"
								name = "professions_item_actions"

								#Mining Buttons
								vbox = {
									name = "mining_item_actions"
									spacing = 10 
									visible = "[GetVariableSystem.HasValue('current_view', 'Mining')]"
									hbox = {
										spacing = 5
										text_single = {
											text = "ORE_AMOUNT"
											visible = "[PlayerHasReagentOre(GetVariableSystem.Get('selected_item'))]"
										}
										text_single = {
											text = "BAR_AMOUNT"
											visible = "[PlayerHasReagentBar(GetVariableSystem.Get('selected_item'))]"
										}
										text_single = {
											text = "ORE_AMOUNT_NONE"
											visible = "[Not(PlayerHasReagentOre(GetVariableSystem.Get('selected_item')))]"
										}
										text_single = {
											text = "BAR_AMOUNT_NONE"
											visible = "[Not(PlayerHasReagentBar(GetVariableSystem.Get('selected_item')))]"
										}
									}
									hbox = {
										spacing = 10
										button_primary = {
											text = "SMELT_TEXT"
											tooltip = smelt_tooltip
											enabled = "[And(PlayerHasReagentOre(GetVariableSystem.Get('selected_item')), GreaterThanOrEqualTo_CFixedPoint(PlayerGetReagentOre(GetVariableSystem.Get('selected_item')).GetValue, '(CFixedPoint)5')))]"
											onclick = "[GetVariableSystem.Set('current_batch_function', 'smelt')]"
											onclick = "[PlayerGuiExecute('batch_start_sgui')]"
										}
									}
								}
	
								button_primary = {
									text = "sell_text"
									tooltip = commerce_tooltip
									enabled = "[And(Not(PlayerHasVar('sell_cooldown')), PlayerHasReagent(GetVariableSystem.Get('selected_item')))]"
									onclick = "[GetVariableSystem.Set('current_batch_function', 'sell')]"
								}
								
							}
							#Actions
							vbox = {
								spacing = 10
								margin_left = 10
								margin_right = 10
								name = "batch_items_actions"
								visible = "[GetVariableSystem.Exists('current_batch_function')]"
								state = {
									name = _show
									using = Animation_FadeIn_Standard
									using = Sound_WindowShow_Standard
									on_start = "[PlayerGuiExecute('batch_start_sgui')]"
								}

								state = {
									name = _hide
									using = Animation_FadeOut_Standard
									using = Sound_WindowHide_Standard
									on_start = "[GetVariableSystem.Clear('current_batch_function')]"
									on_start = "[GetVariableSystem.Clear('batch_edit')]"
								}
								hbox = {
									spacing = 10  
									button_standard = {
										size = { 50 50 }
										button_select_arrow = {
											position = { 15 15 }
											mirror = horizontal	
										}
										visible = "[GetVariableSystem.HasValue('current_batch_function', 'smelt')]"
										enabled = "[Not(ObjectsEqual(PlayerGetVar('batch_amount').GetValue, '(CFixedPoint)0'))]"
										onclick = "[PlayerGuiExecute('remove_ore_batch_sgui')]"
									}
									button_standard = {
										size = { 50 50 }
										button_select_arrow = {
											position = { 15 15 }
											mirror = horizontal	
										}
										visible = "[Not(GetVariableSystem.HasValue('current_batch_function', 'smelt'))]"
										enabled = "[Not(ObjectsEqual(PlayerGetVar('batch_amount').GetValue, '(CFixedPoint)0'))]"
										onclick = "[PlayerGuiExecute('remove_batch_sgui')]"
									}
									button_standard = {
										size = { 50 50 }
										buttonText = {
											text_single =  {
												text = "[PlayerGetVar('batch_amount').GetValue]"
												fontsize = 20
												parentanchor = center
												position = { 0 -5 }
											}
										}
									}
									button_standard = {
										size = { 50 50 }
										button_select_arrow = {
											position = { 15 15 }
										}
										visible = "[Not(GetVariableSystem.HasValue('current_batch_function', 'smelt'))]"
										onclick = "[PlayerGuiExecute('add_batch_sgui')]"
										enabled = "[GreaterThanOrEqualTo_CFixedPoint(PlayerGetReagentOre(GetVariableSystem.Get('selected_item')).GetValue, Add_CFixedPoint(PlayerGetVar('batch_amount').GetValue, '(CFixedPoint)1')))]"
									}
									button_standard = {
										size = { 50 50 }
										button_select_arrow = {
											position = { 15 15 }
										}
										visible = "[GetVariableSystem.HasValue('current_batch_function', 'smelt')]"
										onclick = "[PlayerGuiExecute('add_ore_batch_sgui')]"
										enabled = "[GreaterThanOrEqualTo_CFixedPoint(PlayerGetReagentOre(GetVariableSystem.Get('selected_item')).GetValue, Add_CFixedPoint(PlayerGetVar('batch_amount').GetValue, '(CFixedPoint)5')))]"
									}
								}
								button_standard = {
									text = "GO_BACK_TEXT"
									size = { 150 25 }
									onclick = "[GetVariableSystem.Clear('current_batch_function')]"
								}
								button_primary = {
									text = "[Localize(Concatenate(GetVariableSystem.Get('current_batch_function'), '_text'))]"
									size = { 150 30 }
									visible = "[Not(Or(GetVariableSystem.HasValue('current_batch_function', 'sell'), GetVariableSystem.HasValue('current_batch_function', 'buy')))]"
									enabled = "[Not(ObjectsEqual(PlayerGetVar('batch_amount').GetValue, '(CFixedPoint)0'))]"
									onclick = "[GetScriptedGui(Concatenate(GetVariableSystem.Get('current_batch_function'), '_reagent_sgui')).Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('reagent', MakeScopeFlag(GetVariableSystem.Get('selected_item'))).End)]"
									onclick = "[PlayerGuiExecute('batch_start_sgui')]"
								}
								hbox = {
									visible = "[Or(GetVariableSystem.HasValue('current_batch_function', 'sell'), GetVariableSystem.HasValue('current_batch_function', 'buy')))]"
									spacing = 5
									button_standard = {
										size = { 50 30 }
										text = "ore"
										onclick = "[GetVariableSystem.Set('commerce_type', 'ore')]"
										down = "[GetVariableSystem.HasValue('commerce_type', 'ore')]"
										onclick = "[GetScriptedGui('set_reagent_commerce_sgui').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('commerce', MakeScopeFlag(GetVariableSystem.Get('commerce_type'))).End)]"
									}
									button_primary = {
										# vis = Has Ore commerce type enabled = has enough to sell
										text = "[Localize(Concatenate(GetVariableSystem.Get('current_batch_function'), '_text'))]"
										size = { 75 30 }
										visible = "[And(GetVariableSystem.HasValue('commerce_type', 'ore'), GetVariableSystem.HasValue('current_batch_function', 'sell'))]"
										enabled = "[And(Not(ObjectsEqual(PlayerGetVar('batch_amount').GetValue, '(CFixedPoint)0')), GreaterThanOrEqualTo_CFixedPoint(PlayerGetReagentOre(GetVariableSystem.Get('selected_item')).GetValue, PlayerGetVar('batch_amount').GetValue)))]"
										onclick = "[GetScriptedGui(Concatenate(GetVariableSystem.Get('current_batch_function'), '_reagent_sgui')).Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('reagent', MakeScopeFlag(GetVariableSystem.Get('selected_item'))).End)]"
										onclick = "[PlayerGuiExecute('batch_start_sgui')]"
										onclick = "[GetVariableSystem.Clear('current_batch_function')]"
									}
						
									button_primary = {
										# vis = Has Bar commerce type enabled = has enough to sell
										text = "[Localize(Concatenate(GetVariableSystem.Get('current_batch_function'), '_text'))]"
										size = { 75 30 }
										visible = "[And(GetVariableSystem.HasValue('commerce_type', 'bar'), GetVariableSystem.HasValue('current_batch_function', 'sell'))]"
										enabled = "[And(Not(ObjectsEqual(PlayerGetVar('batch_amount').GetValue, '(CFixedPoint)0')), GreaterThanOrEqualTo_CFixedPoint(PlayerGetReagentBar(GetVariableSystem.Get('selected_item')).GetValue, PlayerGetVar('batch_amount').GetValue)))]"
										onclick = "[GetScriptedGui(Concatenate(GetVariableSystem.Get('current_batch_function'), '_reagent_sgui')).Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('reagent', MakeScopeFlag(GetVariableSystem.Get('selected_item'))).End)]"
										onclick = "[PlayerGuiExecute('batch_start_sgui')]"
										onclick = "[GetVariableSystem.Clear('current_batch_function')]"
									}

									button_standard = {
										size = { 50 30 }
										text = "bar"
										onclick = "[GetVariableSystem.Set('commerce_type', 'bar')]"
										down = "[GetVariableSystem.HasValue('commerce_type', 'bar')]"
										onclick = "[GetScriptedGui('set_reagent_commerce_sgui').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('commerce', MakeScopeFlag(GetVariableSystem.Get('commerce_type'))).End)]"
									}
								}
								
							}
							
							background = {
								using = Background_Area
							}
						}
						vbox = {
							margin_left = 55
							margin_right = 55
							margin_top = 30
							margin_bottom = 30
							spacing = 15
							text_single = {
								text = "ACTIVITIES_TEXT"
								fontsize = 20
							}
							vbox = {
								spacing = 10 
								button_primary = {
									size = { 350 50 }
									tooltip = "[Localize(Concatenate(GetVariableSystem.Get('current_view'), '_activity_1_desc'))]"
									text = "[Localize(Concatenate(GetVariableSystem.Get('current_view'), '_activity_1_text'))]"
								}
								button_primary = {
									size = { 350 50 }
									hbox = {
										visible = "[PlayerHasVar(Concatenate(GetVariableSystem.Get('current_view'), '_activity_2_unlocked'))]"
										tooltip = "[Localize(Concatenate(GetVariableSystem.Get('current_view'), '_activity_2_desc'))]"
									}
									hbox = {
										visible = "[Not(PlayerHasVar(Concatenate(GetVariableSystem.Get('current_view'), '_activity_2_unlocked')))]"
										tooltip = "[Localize(Concatenate(GetVariableSystem.Get('current_view'), '_activity_2_desc_fail'))]"
									}
									enabled = "[PlayerHasVar(Concatenate(GetVariableSystem.Get('current_view'), '_activity_2_unlocked'))]"
									text = "[Localize(Concatenate(GetVariableSystem.Get('current_view'), '_activity_2_text'))]"
								}
								button_primary = {
									size = { 350 50 }
									hbox = {
										visible = "[PlayerHasVar(Concatenate(GetVariableSystem.Get('current_view'), '_activity_3_unlocked'))]"
										tooltip = "[Localize(Concatenate(GetVariableSystem.Get('current_view'), '_activity_3_desc'))]"
									}
									hbox = {
										visible = "[Not(PlayerHasVar(Concatenate(GetVariableSystem.Get('current_view'), '_activity_3_unlocked')))]"
										tooltip = "[Localize(Concatenate(GetVariableSystem.Get('current_view'), '_activity_3_desc_fail'))]"
									}
									enabled = "[PlayerHasVar(Concatenate(GetVariableSystem.Get('current_view'), '_activity_3_unlocked'))]"
									text = "[Localize(Concatenate(GetVariableSystem.Get('current_view'), '_activity_3_text'))]"
								}
							}
							background = {
								using = Background_Area
							}
						}
						
					}
				}
				
				expand = {}
			}
		}
	}
}

types professions_types {
	type professions_box = hbox {
		vbox = {
			spacing = 10
			name = "basic_profession_display"
			fixedgridbox = {
				minimumsize = { 500 1 }
				addcolumn = 30%
				addrow = 175
				flipdirection = yes
				maxhorizontalslots = 1
				datamodel_wrap = 1
				datamodel = "[GetTrait(Scope.GetFlagName).GetLevelTracks]"
				item = {
					container = {
						using = Mask_Rough_Edges
						text_single = {
							text = "[TraitLevelTrack.GetName]"
							size = { 100% 100% }
							autoresize = no
							#margin = { 10 0 }
							align = center
							position = { 0 -50 }
							fontsize = 18
						}
						text_single = {	
							text = "ITEMS_MADE_TEXT"
							size = { 100% 100% }
							autoresize = no
							#margin = { 10 0 }
							align = center
							position = { -175 -25 }
							fontsize = 18
							alwaystransparent = no
						}
						button_standard = {
							size = { 150 50 }
							position = { 10 -10 }
							visible = "[InDebugMode]"
							raw_text = "items click: + rclick: -"
							onrightclick = "[GetScriptedGui('remove_items_made_sgui').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('profession', MakeScopeFlag(TraitLevelTrack.GetName)).End)]"	
							onclick = "[GetScriptedGui('add_items_made_sgui').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('profession', MakeScopeFlag(TraitLevelTrack.GetName)).End)]"	
						}
						text_single = {	
							text = "PROFESSION_PROGRESS_TEXT"
							size = { 100% 100% }
							autoresize = no
							#margin = { 10 0 }
							align = center
							position = { -120 20 }
							fontsize = 16
							alwaystransparent = no
						}
						button_standard = {
							size = { 150 50 }
							position = { 150 50 }
							visible = "[InDebugMode]"
							raw_text = "xp click: + rclick: -"
							onrightclick = "[GetScriptedGui('remove_xp_sgui').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('profession', MakeScopeFlag(TraitLevelTrack.GetName)).End)]"	
							onclick = "[GetScriptedGui('add_xp_sgui').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('profession', MakeScopeFlag(TraitLevelTrack.GetName)).End)]"	
						}
						#### PROGRESSBAR ###
						progressbar = {
							name = "progress_bar_blocked"
							parentanchor = bottom
							size = { 210 15 }
							position = { 20 -20 }
							
							progresstexture = "gfx/interface/progressbars/war_progress_blue.dds"

							noprogresstexture = "gfx/interface/progressbars/war_progress_noprogress.dds"

							value = "[PlayerGetVar(Localize(Concatenate(TraitLevelTrack.GetName, '_xp'))).GetValue]"

							direction = horizontal
							alwaystransparent = yes
						}	
						# button_standard = {
						# 	size = { 100 25 }
						# 	parentanchor = right
						# 	position = { -25 25 }
						# 	enabled = "[Not(And(PlayerHasVar('profession_1_cooldown'), PlayerHasVar('profession_2_cooldown')))]"
						# 	text = "REMOVE_PROFESSION_TEXT"
						# }
						button_primary = {
							size = { 175 50 }
							parentanchor = right
							position = { -25 75 }
							text = "[Localize(Concatenate('practice_', TraitLevelTrack.GetName))]"
							onclick = "[GetVariableSystem.Set('current_view', TraitLevelTrack.GetName)]"
							onclick = "[GetVariableSystem.Set('profession_detail_window_open', 'yes')]"
						}
						icon = {
							parentanchor = right|top
							size = { 500 150 }
							texture = "[GetProfessionIllustration(TraitLevelTrack.GetName)]"
							alpha = 0.3
							using = Mask_Rough_Edges
							mirror = horizontal
						}
						blockoverride "highlight_icon" {}
						blockoverride "button_standard_mouseover" {}
					}
				}
			}
		}
	}
	type profession_detail_view_overview = vbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding
		vbox = {
			layoutpolicy_horizontal = expanding
			minimumsize = { 550 220 }
			
			background = {
				name = "illustrations"
				texture = "[GetProfessionIllustration(Localize(Concatenate('trait_', GetVariableSystem.Get('selected_trait'))))]"
				margin_top = 10
				alpha = 0.7
				using = Mask_Rough_Edges
			}
		}

		text_multi = {
			name = "description"
			minimumsize = { 515 -1 }
			maximumsize = { 515 -1 }
			margin = { 15 15 }
			autoresize = yes
			text = "[GetTrait(GetVariableSystem.Get('selected_trait')).GetDescription(GetNullCharacter)]"
			using = Font_Size_Small
		}

		scrollbox = {
			name = "description_scrollarea"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			blockoverride "scrollbox_content"
			{
				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					spacing = 10

					vbox = {
						name = "effect"
						layoutpolicy_horizontal = expanding
					
						background = {
							name = "illustrations"
							texture = "gfx/interface/icons/lifestyle_tree_backgrounds/skulduggery.dds"
							tintcolor = { 0.6 0.8 0.8 0.8 }

							margin = { 0 5 }
							using = Mask_Rough_Edges
							alpha = 0.8
							fittype = centercrop
							mirror = horizontal

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_corners_bottom.dds"
								blend_mode = alphamultiply
								alpha = 0.6
							}

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_rough_edges.dds"
								blend_mode = overlay
								alpha = 0.4
							}
						}

						text_label_center = {
							text = "DECISION_DETAIL_EFFECTS"
						}

						text_multi = {
							layoutpolicy_horizontal = expanding
							margin = { 15 15 }
							max_width = 515
							autoresize = yes
							text = "[Localize(Concatenate(GetVariableSystem.Get('selected_trait'),'_effects'))]"
						}
						text_single = {
							margin = { 15 15 }
							max_width = 515
							autoresize = yes
							text = "PROFESSION_CONFIRM_TEXT_DESC"
							layoutpolicy_horizontal = expanding
						}
					}
				
					expand = {}
				}
			}

			blockoverride "scrollbox_background_fade" {}
		}

		vbox = {
			name = "footer"
			layoutpolicy_horizontal = expanding

			vbox = {
				layoutpolicy_horizontal = expanding
				margin_top = 4
				margin_bottom = 10
				spacing = 5
				spacer = {
					size = { 10 2 }
				}

				hbox = {
					spacing = 10

					button_standard_back = {
						name = "back"
						size = { 120 50 }
						onclick = "[GetVariableSystem.Set('profession_confirm_window_open', 'no')]"
						onclick = "[GetVariableSystem.Clear('selected_trait')]"
						text = "BACK_LABEL"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
					}
					
					button_primary = {
						name = "confirm"
						size = { 380 50 }
												
						text = "[Localize(Concatenate('learn_',GetVariableSystem.Get('selected_trait')))]"
						onclick = "[GetScriptedGui('save_profession_sgui').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope('selected_profession', MakeScopeFlag(Localize(Concatenate('trait_',GetVariableSystem.Get('selected_trait'))))).End)]"
						onclick = "[GetVariableSystem.Set('profession_confirm_window_open', 'no')]"
						onclick = "[GetVariableSystem.Clear('selected_trait')]"
						clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_start_game"
					}
				}

				spacer = {
					size = { 0 2 }
				}

				expand = {}
			}
		}
	}
}